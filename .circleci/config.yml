version: 2
jobs:
  test:
    docker:
      # specify the version you desire here
      - image: circleci/buildpack-deps:jessie

    steps:
      - checkout
      - setup_remote_docker

      - restore_cache:
          name: restore cache with docker image
          keys:
            - v1-{{ .Branch }}
          paths:
            - ./caches/worldofchatting-webserver-test.tar

      - run:
          name: load docker image from cache
          command: |
            set +o pipefail
            docker load -i ./caches/worldofchatting-webserver-test.tar | true

      - run:
          name: build test image
          command: docker-compose build

      - run:
          name: save docker image to folder
          command: |
            mkdir -p caches
            docker save -o ./caches/worldofchatting-webserver-test.tar worldofchatting-webserver-test

      - save_cache:
          name: save folder with docker image to cache
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - ./caches/worldofchatting-webserver-test.tar

      - run:
          name: test
          command: docker-compose run --name worldofchatting-webserver-test webserver npm run test

      - run:
          name: copy test result files
          when: always
          command: |
            docker cp worldofchatting-webserver-test:/user/src/app/coverage ./coverage
            docker cp worldofchatting-webserver-test:/user/src/app/test-results ./test-results

      - store_test_results:
          path: ./test-results

      - store_artifacts:
          path: ./coverage
          destination: test-coverage-results

      - store_artifacts:
          path: ./test-results
          destination: test-results

  build_and_deploy:
    docker:
      # specify the version you desire here
      - image: circleci/buildpack-deps:jessie

    steps:
      - checkout

      - run:
          name: put environment variables in secrets
          command: |
            POSTGRES_USER_ENCODED=$(echo -n $POSTGRES_USER | base64)
            POSTGRES_PASSWORD_ENCODED=$(echo -n $POSTGRES_PASSWORD | base64)
            REDIS_PASSWORD_ENCODED=$(echo -n $REDIS_PASSWORD | base64)
            JWT_SECRET_ENCODED=$(echo -n $JWT_SECRET | base64)
            jwt_secret_lines=$(echo $JWT_SECRET_ENCODED | tr " " "\n")
            sed -i "s/ENV-VAR-POSTGRES-USER/${POSTGRES_USER_ENCODED}/" ./k8s-prod/secret.yaml
            sed -i "s/ENV-VAR-POSTGRES-PASSWORD/${POSTGRES_PASSWORD_ENCODED}/" ./k8s-prod/secret.yaml
            sed -i "s/ENV-VAR-REDIS-PASSWORD/${REDIS_PASSWORD_ENCODED}/" ./k8s-prod/secret.yaml
            for line in $jwt_secret_lines
            do
                sed -i "s/ENV-VAR-JWT-SECRET/${line}ENV-VAR-JWT-SECRET/" ./k8s-prod/secret.yaml
            done
            sed -i "s/ENV-VAR-JWT-SECRET//" ./k8s-prod/secret.yaml

      - run:
          name: download kubectl
          command: curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl

      - run:
          name: make kubectl global executable
          command: |
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin

      - run:
          name: install devspace
          command: |
            curl -s -L "https://github.com/devspace-cloud/devspace/releases/latest" |\
            sed -nE 's!.*"([^"]*devspace-linux-amd64)".*!https://github.com\1!p' | xargs -n 1 curl -L -o devspace && chmod +x devspace;
            sudo mv devspace /usr/local/bin;

      - run:
          name: devspace login
          command: devspace login --key ${DEVSPACE_CLOUD_ACCESS_KEY}

      - run:
          name: set up space to use
          command: devspace use space worldofchatting

      - setup_remote_docker

      - restore_cache:
          name: restore cache with devspace cache file
          keys:
            - v1-devspace-{{ .Branch }}
          paths:
            - ./.devspace/generated.yaml

      - run:
          name: checking
          command: |
            ls -a
            [ -d ./.devspace ] && [ -f ./.devspace/generated.yaml ] && cat ./.devspace/generated.yaml

      - run:
          name: deploy
          command: devspace deploy -p production

      - save_cache:
          name: save new devspace cache file to cache
          key: v1-devspace-{{ .Branch }}-{{ epoch }}
          paths:
            - ./.devspace/generated.yaml

      - run:
          name: checking again
          command: |
            ls -a
            [ -d ./.devspace ] && [ -f ./.devspace/generated.yaml ] && cat ./.devspace/generated.yaml

workflows:
  version: 2
  test_build_and_deploy:
    jobs:
      - test
      - build_and_deploy:
          requires:
            - test
          filters:
            branches:
              only: master
